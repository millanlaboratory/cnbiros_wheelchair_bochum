<?xml version="1.0"?>
<launch>

<!-- ************************************************************** -->
<!--						Arguments								-->
<!-- ************************************************************** -->

	<!-- Running options -->
	<arg name="autostart"			default="False" />
	<arg name="enable_bci"			default="False" />
	<arg name="enable_autostart"	default="False" />
	<arg name="enable_repellors"	default="True" />
	<arg name="enable_attractors"	default="True" />
	<arg name="enable_joystick"		default="False" />
	<arg name="enable_recording"	default="True" />
	

	<!-- Parameters -->
	<arg name="wheelchair_description"	default="$(find cnbiros_wheelchair_description)/urdf/wheelchair.urdf.xacro" />
	<arg name="params_wheelchair"		default="$(find cnbiros_wheelchair_bochum)/params/params_wheelchair.yaml" />
	<arg name="params_shared_dynamics"	default="$(find cnbiros_wheelchair_bochum)/params/dynamics/params_shared_dynamics.yaml" />
	<arg name="params_bci_interfaces"	default="$(find cnbiros_wheelchair_bochum)/params/dynamics/params_bci_interfaces.yaml" />
	<arg name="params_joy"				default="$(find cnbiros_wheelchair_bochum)/params/dynamics/params_joy.yaml" />
	<arg name="params_state_control"	default="$(find cnbiros_wheelchair_bochum)/params/dynamics/params_state_control.yaml" />
	
	<!-- Bag parameters -->
	<arg name="set_bag_name" />
	<arg name="set_save_dir"	default="/mnt/data/cnbitk_data/" />
	<arg name="set_save_topics" default="/bci_command /camera/scan /cmd_vel /hokuyo/scan /joy /joy_teleop/cmd_vel /odom /rostic_cnbi2ros /rostid_cnbi2ros /shared_dynamics/attractors /shared_dynamics/repellors" />


<!-- ************************************************************** -->
<!--						BCI										-->
<!-- ************************************************************** -->
	<group if="$(arg enable_bci)">

		<!-- BCI interfaces parameters -->
		<rosparam subst_value="True" file="$(arg params_bci_interfaces)" command="load" />
		
		<!-- TiD interface -->
		<node pkg="cnbiros_bci" type="rostid" name="rostid" output="screen" />
		
		<!-- TiD converter -->
		<node pkg="cnbiros_bci" type="tid_to_point" output="screen" name="tid_to_point" />
	</group>



<!-- ************************************************************** -->
<!--						Wheelchair								-->
<!-- ************************************************************** -->

	<!-- Wheelchair parameter load -->
	<rosparam subst_value="True" file="$(arg params_wheelchair)" command="load" />

	<!-- Wheelchair description -->
	<param name="robot_description" command="$(find xacro)/xacro --inorder $(arg wheelchair_description)" />

	<!-- Transformations -->
	<node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" />
	<node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher" />

<!-- ************************************************************** -->
<!--						Navigation								-->
<!-- ************************************************************** -->

	
	<!-- Shared navigation -->
	<rosparam subst_value="True" file="$(arg params_shared_dynamics)" command="load" />

	<!-- Proximity Grid converters -->
	<node pkg="cnbiros_shared_navigation" type="laserscan_to_proximitygrid" output="screen" name="laserscan_to_proximitygrid" /> 
	<node pkg="cnbiros_shared_navigation" type="point_to_proximitygrid" output="screen" name="point_to_proximitygrid" /> 

	<!-- Proximity Grid visualization -->
	<node pkg="cnbiros_shared_navigation" type="proximitygrid_visualizer" output="screen" name="visualizer_repellors" > 
		<remap from="/proximity_grid" to="shared_dynamics/repellors" />
		<remap from="/visualization" to="shared_dynamics/repellors_visualization" />
	</node>
	
	<node pkg="cnbiros_shared_navigation" type="proximitygrid_visualizer" output="screen" name="visualizer_attractors" > 
		<remap from="/proximity_grid" to="shared_dynamics/attractors" />
		<remap from="/visualization" to="shared_dynamics/attractors_visualization" />
	</node>


	<!-- Shared dynamics -->	
	<node pkg="cnbiros_shared_navigation" type="shared_dynamics" output="screen" name="shared_dynamics" >
	  <rosparam param="enable_autostart" subst_value="True">$(arg autostart)</rosparam>
	  <rosparam param="enable_repellors" subst_value="True">$(arg enable_repellors)</rosparam>
	  <rosparam param="enable_attractors" subst_value="True">$(arg enable_attractors)</rosparam>
	</node>

<!-- ************************************************************** -->
<!--						Joystick								-->
<!-- ************************************************************** -->

	<group if="$(arg enable_joystick)">

		<!-- Load joystick parameters -->
		<rosparam subst_value="True" file="$(arg params_joy)" command="load" />
		
		<!-- Run joy node -->
		<node pkg="joy" type="joy_node" name="joy_node" output="screen" />
		
		<!-- Run joy teleop node -->
		<node pkg="joy_teleop" type="joy_teleop.py" name="joy_teleop" />

		<!-- Run joy filter control -->
		<node pkg="cnbiros_joystick" type="joy_filter_control" name="joy_filter_control" output="screen"/>

	</group>

<!-- ************************************************************** -->
<!--						State control							-->
<!-- ************************************************************** -->

	<!-- Load state control parameters -->
	<rosparam subst_value="True" file="$(arg params_state_control)" command="load" />
	
	<!-- Run system state control node -->
	<node pkg="cnbiros_state_control" type="system_state" name="system_state" output="screen"/>
	
	<!-- Run BCI state control node -->
	<node pkg="cnbiros_state_control" type="bci_state" name="bci_state" output="screen"/>

	<!-- ***************** ROS bag recording ********************* -->
	<group if="$(arg enable_recording)">
		<node pkg="rosbag" type="record" name="rosbag_record" args=" -O $(arg set_save_dir)/$(arg set_bag_name) record $(arg set_save_topics)" />
	</group>
	

</launch>
