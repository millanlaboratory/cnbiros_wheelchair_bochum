<?xml version="1.0"?>
<launch>

<!-- ************************************************************** -->
<!--						Arguments								-->
<!-- ************************************************************** -->

	<!-- Running options -->
	<arg name="autostart"			default="False" />
	<arg name="enable_bci"			default="False" />
	<arg name="visualization"		default="False" />
	<arg name="on_place"			default="False" />
	<arg name="enable_repellors"	default="True" />
	<arg name="enable_attractors"	default="True" />
	<arg name="enable_encoders"		default="False" />	<!-- Until encoders are not mounted -->
	<arg name="enable_rgb_odometry"	default="True" />	<!-- To be modified when encoder are mounted -->
	<arg name="enable_amcl"			default="False" />
	<arg name="enable_slam"			default="False" />
	<arg name="enable_kinect"		default="False" />

	<!-- Wheelchair parameters -->
	<arg name="wheelchair_description"	default="$(find cnbiros_wheelchair_description)/urdf/wheelchair.urdf.xacro" />
	<arg name="params_wheelchair"		default="$(find cnbiros_wheelchair_bochum)/params/params_wheelchair.yaml" />

	<!-- Navigation parameters -->
	<arg name="params_costmap_common"	 default="$(find cnbiros_wheelchair_bochum)/params/params_costmap_common.yaml" />
	<arg name="params_costmap_global"	 default="$(find cnbiros_wheelchair_bochum)/params/params_costmap_global.yaml" />
	<arg name="params_costmap_local"	 default="$(find cnbiros_wheelchair_bochum)/params/params_costmap_local.yaml" />
	<arg name="params_planner"			 default="$(find cnbiros_wheelchair_bochum)/params/params_planner.yaml" />
	<arg name="params_amcl_diff"		 default="$(find cnbiros_wheelchair_bochum)/params/params_amcl_diff.yaml" />
	<arg name="params_mapserver"		 default="$(find cnbiros_wheelchair_bochum)/params/params_mapserver.yaml" />
	<arg name="params_sharedactions"	 default="$(find cnbiros_wheelchair_bochum)/params/params_shared_actions.yaml" />

	<!-- BCI control parameters -->
	<arg name="params_bci_interfaces"	default="$(find cnbiros_wheelchair_bochum)/params/params_bci_interfaces.yaml" />
	
<!-- ************************************************************** -->
<!--						BCI	Interfaces							-->
<!-- ************************************************************** -->

	<group if="$(arg enable_bci)">

		<!-- BCI interfaces parameters -->
		<rosparam subst_value="True" file="$(arg params_bci_interfaces)" command="load" />
		
		<!-- TiD interface -->
		<node pkg="cnbiros_bci" type="rostid" name="rostid" output="screen" />
		
		<!-- TiD converter -->
		<node pkg="cnbiros_bci" type="tid_to_point" output="screen" name="tid_to_point" />
	</group>

<!-- ************************************************************** -->
<!--					RVIZ visualization							-->
<!-- ************************************************************** -->
	
	<group if="$(arg visualization)">
		<node name="rviz" pkg="rviz" type="rviz" args="-d $(find cnbiros_wheelchair_description)/launch/wheelchair_footprint.rviz"/>
	</group>

<!-- ************************************************************** -->
<!--						Wheelchair								-->
<!-- ************************************************************** -->

	<!-- Wheelchair parameter load -->
	<rosparam subst_value="True" file="$(arg params_wheelchair)" command="load" />

	<!-- Openni bringup -->
	<include file="$(find openni_launch)/launch/openni.launch">
		<arg name="depth_registration" value="True" />
	</include>

	<!-- Kinect to LaserScan -->
	<group if="$(arg enable_kinect)" >
		<node name="kinect_to_laserscan" pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" >
    	   	<remap from="image" to="camera/depth_registered/image"/>
			<remap from="scan" to="camera/scan"/>
		</node>
	</group>

	<!-- Visual odometry - rtabmap -->
	<group if="$(arg enable_rgb_odometry)">
	<node pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" >
		<remap from="/rgb/image/" to="/camera/rgb/image_rect_color"/>
		<remap from="/depth/image/" to="/camera/depth_registered/image_raw"/>
		<remap from="/rgb/camera_info/" to="/camera/rgb/camera_info" />
	</node>
	</group>

	<!-- Hokuyo LaserScan -->
	<node name="hokuyo_scan" pkg="urg_node" type="urg_node" output="screen">
		<remap from="scan" to="/hokuyo/scan"/>
	</node>

	<!-- Motors -->
	<node name="motors" pkg="cnbiros_wheelchair" type="ros_wheelchair_motors" output="screen" />

	<!-- Odometry -->
	<group if="$(arg enable_encoders)">
		<node name="odometry" pkg="cnbiros_wheelchair" type="ros_wheelchair_odometry" output="screen" />
	</group>

	<!-- Wheelchair description -->
	<param name="robot_description" command="$(find xacro)/xacro --inorder $(arg wheelchair_description)" />

	<!-- Transformations -->
	<node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" />
	<node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher" />

<!-- ************************************************************** -->
<!--						Navigation								-->
<!-- ************************************************************** -->

	<!-- Move base -->
	<node name="map_server" pkg="map_server" type="map_server" args="$(arg params_mapserver)" />

	<group if="$(arg enable_amcl)">
		<node pkg="amcl" type="amcl" name="amcl" output="screen">
			<rosparam subst_value="True" file="$(arg params_amcl_diff)" command="load" />	
			<remap from="scan" to="/hokuyo/scan" />
		</node>
	</group>
	
	<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
		<rosparam subst_value="True" file="$(arg params_costmap_common)" command="load" ns="global_costmap" />	
		<rosparam subst_value="True" file="$(arg params_costmap_common)" command="load" ns="local_costmap" />	
		<rosparam subst_value="True" file="$(arg params_costmap_global)" command="load" />	
		<rosparam subst_value="True" file="$(arg params_costmap_local)" command="load" />	
		<rosparam subst_value="True" file="$(arg params_planner)" command="load" />
	</node>

	<group if="$(arg enable_slam)">
		<node name="slam_gmapping" pkg="gmapping" type="slam_gmapping">
			<remap from="scan" to="/hokuyo/scan" />
		</node>
	</group>

	<!-- Shared actions parameters load -->
	<rosparam subst_value="True" file="$(arg params_sharedactions)" command="load" />

	<!-- Proximity sector converters -->
	<node pkg="cnbiros_shared_navigation" type="costmap_to_proximitysector" output="screen" name="costmap_to_proximitysector" />
	<node pkg="cnbiros_shared_navigation" type="point_to_proximitysector" output="screen" name="point_to_proximitysector" />

	<!-- Shared actions -->
	<node pkg="cnbiros_shared_navigation" type="shared_actions" output="screen" name="shared_actions" >
	  <rosparam param="autostart" subst_value="True">$(arg autostart)</rosparam>
	  <rosparam param="on_place" subst_value="True">$(arg on_place)</rosparam>
	  <rosparam param="enable_repellors" subst_value="True">$(arg enable_repellors)</rosparam>
	  <rosparam param="enable_attractors" subst_value="True">$(arg enable_attractors)</rosparam>
	</node>

</launch>
