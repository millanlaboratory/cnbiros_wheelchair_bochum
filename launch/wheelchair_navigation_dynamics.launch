<?xml version="1.0"?>
<launch>

<!-- ************************************************************** -->
<!--						Arguments								-->
<!-- ************************************************************** -->

	<!-- Running options -->
	<arg name="enable_encoders"		default="False" />	<!-- Until encoders are not mounted -->
	<arg name="enable_rgb_odometry"	default="True" />	<!-- To be modified when encoder are mounted -->
	<arg name="enable_kinect"		default="True" />
	<arg name="enable_bci"			default="False" />
	<arg name="enable_autostart"	default="False" />
	<arg name="enable_repellors"	default="True" />
	<arg name="enable_attractors"	default="True" />
	<arg name="enable_joystick"		default="False" />


	<!-- Parameters -->
	<arg name="wheelchair_description"	default="$(find cnbiros_wheelchair_description)/urdf/wheelchair.urdf.xacro" />
	<arg name="params_wheelchair"		default="$(find cnbiros_wheelchair_bochum)/params/dynamics/params_wheelchair.yaml" />
	<arg name="params_shared_dynamics"	default="$(find cnbiros_wheelchair_bochum)/params/dynamics/params_shared_dynamics.yaml" />
	<arg name="params_bci_interfaces"	default="$(find cnbiros_wheelchair_bochum)/params/dynamics/params_bci_interfaces.yaml" />
	<arg name="params_joy"				default="$(find cnbiros_wheelchair_bochum)/params/dynamics/params_joy.yaml" />
	<arg name="params_state_control"	default="$(find cnbiros_wheelchair_bochum)/params/dynamics/params_state_control.yaml" />

	
<!-- ************************************************************** -->
<!--						BCI										-->
<!-- ************************************************************** -->
	<group if="$(arg enable_bci)">

		<!-- BCI interfaces parameters -->
		<rosparam subst_value="True" file="$(arg params_bci_interfaces)" command="load" />
		
		<!-- TiD interface -->
		<node pkg="cnbiros_bci" type="rostid" name="rostid" output="screen" />
		
		<!-- TiD converter -->
		<node pkg="cnbiros_bci" type="tid_to_point" output="screen" name="tid_to_point" />
	</group>



<!-- ************************************************************** -->
<!--						Wheelchair								-->
<!-- ************************************************************** -->

	<!-- Wheelchair parameter load -->
	<rosparam subst_value="True" file="$(arg params_wheelchair)" command="load" />

	<!-- Openni bringup -->
	<include file="$(find openni_launch)/launch/openni.launch">
		<arg name="depth_registration" value="True" />
	</include>

	<!-- Kinect to LaserScan -->
	<group if="$(arg enable_kinect)" >
		<node name="kinect_to_laserscan" pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" >
    	   	<remap from="image" to="camera/depth_registered/image"/>
			<remap from="scan" to="camera/scan"/>
		</node>
	</group>

	<!-- Visual odometry - rtabmap -->
	<group if="$(arg enable_rgb_odometry)">
	<node pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" >
		<remap from="/rgb/image/" to="/camera/rgb/image_rect_color"/>
		<remap from="/depth/image/" to="/camera/depth_registered/image_raw"/>
		<remap from="/rgb/camera_info/" to="/camera/rgb/camera_info" />
	</node>
	</group>

	<!-- Hokuyo LaserScan -->
	<node name="hokuyo_scan" pkg="urg_node" type="urg_node" output="screen">
		<remap from="scan" to="/hokuyo/scan"/>
	</node>

	<!-- Motors -->
	<node name="motors" pkg="cnbiros_wheelchair" type="ros_wheelchair_motors" output="screen" />

	<!-- Odometry -->
	<group if="$(arg enable_encoders)">
		<node name="odometry" pkg="cnbiros_wheelchair" type="ros_wheelchair_odometry" output="screen" />
	</group>

	<!-- Wheelchair description -->
	<param name="robot_description" command="$(find xacro)/xacro --inorder $(arg wheelchair_description)" />

	<!-- Transformations -->
	<node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" />
	<node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher" />

<!-- ************************************************************** -->
<!--						Navigation								-->
<!-- ************************************************************** -->

	
	<!-- Shared navigation -->
	<rosparam subst_value="True" file="$(arg params_shared_dynamics)" command="load" />

	<!-- Proximity Grid converters -->
	<node pkg="cnbiros_shared_navigation" type="laserscan_to_proximitygrid" output="screen" name="laserscan_to_proximitygrid" /> 
	<node pkg="cnbiros_shared_navigation" type="point_to_proximitygrid" output="screen" name="point_to_proximitygrid" /> 

	<!-- Proximity Grid visualization -->
	<node pkg="cnbiros_shared_navigation" type="proximitygrid_visualizer" output="screen" name="visualizer_repellors" > 
		<remap from="/proximity_grid" to="shared_dynamics/repellors" />
		<remap from="/visualization" to="shared_dynamics/repellors_visualization" />
	</node>
	
	<node pkg="cnbiros_shared_navigation" type="proximitygrid_visualizer" output="screen" name="visualizer_attractors" > 
		<remap from="/proximity_grid" to="shared_dynamics/attractors" />
		<remap from="/visualization" to="shared_dynamics/attractors_visualization" />
	</node>


	<!-- Shared dynamics -->	
	<node pkg="cnbiros_shared_navigation" type="shared_dynamics" output="screen" name="shared_dynamics" >
	  <rosparam param="enable_autostart" subst_value="True">$(arg enable_autostart)</rosparam>
	  <rosparam param="enable_repellors" subst_value="True">$(arg enable_repellors)</rosparam>
	  <rosparam param="enable_attractors" subst_value="True">$(arg enable_attractors)</rosparam>
	</node>

<!-- ************************************************************** -->
<!--						Joystick								-->
<!-- ************************************************************** -->

	<group if="$(arg enable_joystick)">

		<!-- Load joystick parameters -->
		<rosparam subst_value="True" file="$(arg params_joy)" command="load" />
		
		<!-- Run joy node -->
		<node pkg="joy" type="joy_node" name="joy_node" output="screen" />
		
		<!-- Run joy teleop node -->
		<node pkg="joy_teleop" type="joy_teleop.py" name="joy_teleop" />
		
		<!-- Run joy filter control -->
		<node pkg="cnbiros_joystick" type="joy_filter_control" name="joy_filter_control" output="screen"/>
	</group>

<!-- ************************************************************** -->
<!--						State control							-->
<!-- ************************************************************** -->

	<!-- Load state control parameters -->
	<rosparam subst_value="True" file="$(arg params_state_control)" command="load" />
	
	<!-- Run system state control node -->
	<node pkg="cnbiros_state_control" type="system_state" name="system_state" output="screen"/>
	
	<!-- Run BCI state control node -->
	<node pkg="cnbiros_state_control" type="bci_state" name="bci_state" output="screen"/>

	


</launch>
